
Lab_1_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f34  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003044  08003044  00013044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030fc  080030fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080030fc  080030fc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030fc  080030fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030fc  080030fc  000130fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001054  20000010  08003114  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001064  08003114  00021064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fae2  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002578  00000000  00000000  0002fb1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd8  00000000  00000000  00032098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb0  00000000  00000000  00033070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018497  00000000  00000000  00033f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c2c0  00000000  00000000  0004c3b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091023  00000000  00000000  00058677  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e969a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004178  00000000  00000000  000e9718  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	0800302c 	.word	0x0800302c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	0800302c 	.word	0x0800302c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	; 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fa7d 	bl	8000684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f84b 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8b9 	bl	8000304 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000192:	f000 f88d 	bl	80002b0 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000196:	4b1d      	ldr	r3, [pc, #116]	; (800020c <main+0x8c>)
 8000198:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800019c:	461d      	mov	r5, r3
 800019e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001ae:	2100      	movs	r1, #0
 80001b0:	4618      	mov	r0, r3
 80001b2:	f001 fd71 	bl	8001c98 <osThreadCreate>
 80001b6:	4602      	mov	r2, r0
 80001b8:	4b15      	ldr	r3, [pc, #84]	; (8000210 <main+0x90>)
 80001ba:	601a      	str	r2, [r3, #0]

  /* definition and creation of myLedTask */
  osThreadDef(myLedTask, StartLedTask, osPriorityNormal, 0, 128);
 80001bc:	4b15      	ldr	r3, [pc, #84]	; (8000214 <main+0x94>)
 80001be:	f107 0420 	add.w	r4, r7, #32
 80001c2:	461d      	mov	r5, r3
 80001c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myLedTaskHandle = osThreadCreate(osThread(myLedTask), NULL);
 80001d0:	f107 0320 	add.w	r3, r7, #32
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f001 fd5e 	bl	8001c98 <osThreadCreate>
 80001dc:	4602      	mov	r2, r0
 80001de:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <main+0x98>)
 80001e0:	601a      	str	r2, [r3, #0]

  /* definition and creation of myUartTask */
  osThreadDef(myUartTask, StartUartTask, osPriorityNormal, 0, 128);
 80001e2:	4b0e      	ldr	r3, [pc, #56]	; (800021c <main+0x9c>)
 80001e4:	1d3c      	adds	r4, r7, #4
 80001e6:	461d      	mov	r5, r3
 80001e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myUartTaskHandle = osThreadCreate(osThread(myUartTask), NULL);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2100      	movs	r1, #0
 80001f8:	4618      	mov	r0, r3
 80001fa:	f001 fd4d 	bl	8001c98 <osThreadCreate>
 80001fe:	4602      	mov	r2, r0
 8000200:	4b07      	ldr	r3, [pc, #28]	; (8000220 <main+0xa0>)
 8000202:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000204:	f001 fd41 	bl	8001c8a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000208:	e7fe      	b.n	8000208 <main+0x88>
 800020a:	bf00      	nop
 800020c:	08003050 	.word	0x08003050
 8000210:	20000fcc 	.word	0x20000fcc
 8000214:	08003078 	.word	0x08003078
 8000218:	20001014 	.word	0x20001014
 800021c:	080030a0 	.word	0x080030a0
 8000220:	20001010 	.word	0x20001010

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	; 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f002 fef2 	bl	800301c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000246:	2301      	movs	r3, #1
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000254:	2301      	movs	r3, #1
 8000256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000258:	2302      	movs	r3, #2
 800025a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000262:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000266:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0318 	add.w	r3, r7, #24
 800026c:	4618      	mov	r0, r3
 800026e:	f000 fca7 	bl	8000bc0 <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000278:	f000 f8da 	bl	8000430 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000280:	2302      	movs	r3, #2
 8000282:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2102      	movs	r1, #2
 8000296:	4618      	mov	r0, r3
 8000298:	f000 ff12 	bl	80010c0 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a2:	f000 f8c5 	bl	8000430 <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3740      	adds	r7, #64	; 0x40
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002b4:	4b11      	ldr	r3, [pc, #68]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002b6:	4a12      	ldr	r2, [pc, #72]	; (8000300 <MX_USART1_UART_Init+0x50>)
 80002b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002c2:	4b0e      	ldr	r3, [pc, #56]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002c8:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ce:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002d6:	220c      	movs	r2, #12
 80002d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002da:	4b08      	ldr	r3, [pc, #32]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002e6:	4805      	ldr	r0, [pc, #20]	; (80002fc <MX_USART1_UART_Init+0x4c>)
 80002e8:	f001 fb00 	bl	80018ec <HAL_UART_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002f2:	f000 f89d 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000fd0 	.word	0x20000fd0
 8000300:	40013800 	.word	0x40013800

08000304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 0310 	add.w	r3, r7, #16
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000318:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <MX_GPIO_Init+0x90>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a1d      	ldr	r2, [pc, #116]	; (8000394 <MX_GPIO_Init+0x90>)
 800031e:	f043 0310 	orr.w	r3, r3, #16
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_GPIO_Init+0x90>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0310 	and.w	r3, r3, #16
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_GPIO_Init+0x90>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a17      	ldr	r2, [pc, #92]	; (8000394 <MX_GPIO_Init+0x90>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_GPIO_Init+0x90>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0320 	and.w	r3, r3, #32
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_GPIO_Init+0x90>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a11      	ldr	r2, [pc, #68]	; (8000394 <MX_GPIO_Init+0x90>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_GPIO_Init+0x90>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0304 	and.w	r3, r3, #4
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000366:	480c      	ldr	r0, [pc, #48]	; (8000398 <MX_GPIO_Init+0x94>)
 8000368:	f000 fbf8 	bl	8000b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 800036c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000372:	2301      	movs	r3, #1
 8000374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	2302      	movs	r3, #2
 800037c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800037e:	f107 0310 	add.w	r3, r7, #16
 8000382:	4619      	mov	r1, r3
 8000384:	4804      	ldr	r0, [pc, #16]	; (8000398 <MX_GPIO_Init+0x94>)
 8000386:	f000 fa8f 	bl	80008a8 <HAL_GPIO_Init>

}
 800038a:	bf00      	nop
 800038c:	3720      	adds	r7, #32
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000
 8000398:	40011000 	.word	0x40011000

0800039c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003a4:	2001      	movs	r0, #1
 80003a6:	f001 fcc3 	bl	8001d30 <osDelay>
 80003aa:	e7fb      	b.n	80003a4 <StartDefaultTask+0x8>

080003ac <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedTask */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 80003b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b8:	4803      	ldr	r0, [pc, #12]	; (80003c8 <StartLedTask+0x1c>)
 80003ba:	f000 fbe7 	bl	8000b8c <HAL_GPIO_TogglePin>
	    osDelay(100);
 80003be:	2064      	movs	r0, #100	; 0x64
 80003c0:	f001 fcb6 	bl	8001d30 <osDelay>
		HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 80003c4:	e7f6      	b.n	80003b4 <StartLedTask+0x8>
 80003c6:	bf00      	nop
 80003c8:	40011000 	.word	0x40011000

080003cc <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void const * argument)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUartTask */
	uint8_t aTxBuff[10] = "Tick";
 80003d4:	4a0b      	ldr	r2, [pc, #44]	; (8000404 <StartUartTask+0x38>)
 80003d6:	f107 030c 	add.w	r3, r7, #12
 80003da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003de:	6018      	str	r0, [r3, #0]
 80003e0:	3304      	adds	r3, #4
 80003e2:	7019      	strb	r1, [r3, #0]
 80003e4:	f107 0311 	add.w	r3, r7, #17
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	711a      	strb	r2, [r3, #4]

  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart1, (uint8_t*)aTxBuff, 10, 100);
 80003ee:	f107 010c 	add.w	r1, r7, #12
 80003f2:	2364      	movs	r3, #100	; 0x64
 80003f4:	220a      	movs	r2, #10
 80003f6:	4804      	ldr	r0, [pc, #16]	; (8000408 <StartUartTask+0x3c>)
 80003f8:	f001 fac5 	bl	8001986 <HAL_UART_Transmit>
    osDelay(100);
 80003fc:	2064      	movs	r0, #100	; 0x64
 80003fe:	f001 fc97 	bl	8001d30 <osDelay>
	HAL_UART_Transmit(&huart1, (uint8_t*)aTxBuff, 10, 100);
 8000402:	e7f4      	b.n	80003ee <StartUartTask+0x22>
 8000404:	080030bc 	.word	0x080030bc
 8000408:	20000fd0 	.word	0x20000fd0

0800040c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d101      	bne.n	8000422 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800041e:	f000 f947 	bl	80006b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40000400 	.word	0x40000400

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000442:	4b15      	ldr	r3, [pc, #84]	; (8000498 <HAL_MspInit+0x5c>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a14      	ldr	r2, [pc, #80]	; (8000498 <HAL_MspInit+0x5c>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6193      	str	r3, [r2, #24]
 800044e:	4b12      	ldr	r3, [pc, #72]	; (8000498 <HAL_MspInit+0x5c>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <HAL_MspInit+0x5c>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <HAL_MspInit+0x5c>)
 8000460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000464:	61d3      	str	r3, [r2, #28]
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <HAL_MspInit+0x5c>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000472:	4b0a      	ldr	r3, [pc, #40]	; (800049c <HAL_MspInit+0x60>)
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	4a04      	ldr	r2, [pc, #16]	; (800049c <HAL_MspInit+0x60>)
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	40021000 	.word	0x40021000
 800049c:	40010000 	.word	0x40010000

080004a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a1c      	ldr	r2, [pc, #112]	; (800052c <HAL_UART_MspInit+0x8c>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d131      	bne.n	8000524 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <HAL_UART_MspInit+0x90>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a1a      	ldr	r2, [pc, #104]	; (8000530 <HAL_UART_MspInit+0x90>)
 80004c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b18      	ldr	r3, [pc, #96]	; (8000530 <HAL_UART_MspInit+0x90>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	4b15      	ldr	r3, [pc, #84]	; (8000530 <HAL_UART_MspInit+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a14      	ldr	r2, [pc, #80]	; (8000530 <HAL_UART_MspInit+0x90>)
 80004de:	f043 0304 	orr.w	r3, r3, #4
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <HAL_UART_MspInit+0x90>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0304 	and.w	r3, r3, #4
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f6:	2302      	movs	r3, #2
 80004f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004fa:	2303      	movs	r3, #3
 80004fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	480b      	ldr	r0, [pc, #44]	; (8000534 <HAL_UART_MspInit+0x94>)
 8000506:	f000 f9cf 	bl	80008a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800050a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800050e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <HAL_UART_MspInit+0x94>)
 8000520:	f000 f9c2 	bl	80008a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000524:	bf00      	nop
 8000526:	3720      	adds	r7, #32
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40013800 	.word	0x40013800
 8000530:	40021000 	.word	0x40021000
 8000534:	40010800 	.word	0x40010800

08000538 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08c      	sub	sp, #48	; 0x30
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000548:	2200      	movs	r2, #0
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	201d      	movs	r0, #29
 800054e:	f000 f980 	bl	8000852 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000552:	201d      	movs	r0, #29
 8000554:	f000 f999 	bl	800088a <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <HAL_InitTick+0xa0>)
 800055a:	69db      	ldr	r3, [r3, #28]
 800055c:	4a1e      	ldr	r2, [pc, #120]	; (80005d8 <HAL_InitTick+0xa0>)
 800055e:	f043 0302 	orr.w	r3, r3, #2
 8000562:	61d3      	str	r3, [r2, #28]
 8000564:	4b1c      	ldr	r3, [pc, #112]	; (80005d8 <HAL_InitTick+0xa0>)
 8000566:	69db      	ldr	r3, [r3, #28]
 8000568:	f003 0302 	and.w	r3, r3, #2
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000570:	f107 0210 	add.w	r2, r7, #16
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4611      	mov	r1, r2
 800057a:	4618      	mov	r0, r3
 800057c:	f000 ff1e 	bl	80013bc <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000580:	f000 fef4 	bl	800136c <HAL_RCC_GetPCLK1Freq>
 8000584:	4603      	mov	r3, r0
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800058a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <HAL_InitTick+0xa4>)
 800058e:	fba2 2303 	umull	r2, r3, r2, r3
 8000592:	0c9b      	lsrs	r3, r3, #18
 8000594:	3b01      	subs	r3, #1
 8000596:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <HAL_InitTick+0xa8>)
 800059a:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <HAL_InitTick+0xac>)
 800059c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <HAL_InitTick+0xa8>)
 80005a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005a4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <HAL_InitTick+0xa8>)
 80005a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005aa:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <HAL_InitTick+0xa8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_InitTick+0xa8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80005b8:	4809      	ldr	r0, [pc, #36]	; (80005e0 <HAL_InitTick+0xa8>)
 80005ba:	f000 ff4d 	bl	8001458 <HAL_TIM_Base_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d104      	bne.n	80005ce <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <HAL_InitTick+0xa8>)
 80005c6:	f000 ff9f 	bl	8001508 <HAL_TIM_Base_Start_IT>
 80005ca:	4603      	mov	r3, r0
 80005cc:	e000      	b.n	80005d0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3730      	adds	r7, #48	; 0x30
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	431bde83 	.word	0x431bde83
 80005e0:	20001018 	.word	0x20001018
 80005e4:	40000400 	.word	0x40000400

080005e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <HardFault_Handler+0x4>

080005fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <MemManage_Handler+0x4>

08000600 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <BusFault_Handler+0x4>

08000606 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <UsageFault_Handler+0x4>

0800060c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <TIM3_IRQHandler+0x10>)
 800061e:	f000 ffc5 	bl	80015ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20001018 	.word	0x20001018

0800062c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000638:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800063a:	e003      	b.n	8000644 <LoopCopyDataInit>

0800063c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800063e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000640:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000642:	3104      	adds	r1, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000644:	480a      	ldr	r0, [pc, #40]	; (8000670 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000648:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800064a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800064c:	d3f6      	bcc.n	800063c <CopyDataInit>
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000650:	e002      	b.n	8000658 <LoopFillZerobss>

08000652 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000654:	f842 3b04 	str.w	r3, [r2], #4

08000658 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800065a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800065c:	d3f9      	bcc.n	8000652 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800065e:	f7ff ffe5 	bl	800062c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000662:	f002 fcb7 	bl	8002fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000666:	f7ff fd8b 	bl	8000180 <main>
  bx lr
 800066a:	4770      	bx	lr
  ldr r3, =_sidata
 800066c:	08003104 	.word	0x08003104
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000674:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000678:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800067c:	20001064 	.word	0x20001064

08000680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <ADC1_2_IRQHandler>
	...

08000684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <HAL_Init+0x28>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <HAL_Init+0x28>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000694:	2003      	movs	r0, #3
 8000696:	f000 f8d1 	bl	800083c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff ff4c 	bl	8000538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a0:	f7ff fecc 	bl	800043c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40022000 	.word	0x40022000

080006b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <HAL_IncTick+0x1c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_IncTick+0x20>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	4a03      	ldr	r2, [pc, #12]	; (80006d0 <HAL_IncTick+0x20>)
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	20000008 	.word	0x20000008
 80006d0:	20001060 	.word	0x20001060

080006d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return uwTick;
 80006d8:	4b02      	ldr	r3, [pc, #8]	; (80006e4 <HAL_GetTick+0x10>)
 80006da:	681b      	ldr	r3, [r3, #0]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20001060 	.word	0x20001060

080006e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fe:	68ba      	ldr	r2, [r7, #8]
 8000700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000704:	4013      	ands	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071a:	4a04      	ldr	r2, [pc, #16]	; (800072c <__NVIC_SetPriorityGrouping+0x44>)
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	60d3      	str	r3, [r2, #12]
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <__NVIC_GetPriorityGrouping+0x18>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	f003 0307 	and.w	r3, r3, #7
}
 800073e:	4618      	mov	r0, r3
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	2b00      	cmp	r3, #0
 800075c:	db0b      	blt.n	8000776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f003 021f 	and.w	r2, r3, #31
 8000764:	4906      	ldr	r1, [pc, #24]	; (8000780 <__NVIC_EnableIRQ+0x34>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	095b      	lsrs	r3, r3, #5
 800076c:	2001      	movs	r0, #1
 800076e:	fa00 f202 	lsl.w	r2, r0, r2
 8000772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	e000e100 	.word	0xe000e100

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db0a      	blt.n	80007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <__NVIC_SetPriority+0x4c>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ac:	e00a      	b.n	80007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <__NVIC_SetPriority+0x50>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	3b04      	subs	r3, #4
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	440b      	add	r3, r1
 80007c2:	761a      	strb	r2, [r3, #24]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f1c3 0307 	rsb	r3, r3, #7
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	bf28      	it	cs
 80007f6:	2304      	movcs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d902      	bls.n	8000808 <NVIC_EncodePriority+0x30>
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3b03      	subs	r3, #3
 8000806:	e000      	b.n	800080a <NVIC_EncodePriority+0x32>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43d9      	mvns	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4313      	orrs	r3, r2
         );
}
 8000832:	4618      	mov	r0, r3
 8000834:	3724      	adds	r7, #36	; 0x24
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff4f 	bl	80006e8 <__NVIC_SetPriorityGrouping>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000864:	f7ff ff64 	bl	8000730 <__NVIC_GetPriorityGrouping>
 8000868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	6978      	ldr	r0, [r7, #20]
 8000870:	f7ff ffb2 	bl	80007d8 <NVIC_EncodePriority>
 8000874:	4602      	mov	r2, r0
 8000876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff81 	bl	8000784 <__NVIC_SetPriority>
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff57 	bl	800074c <__NVIC_EnableIRQ>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b08b      	sub	sp, #44	; 0x2c
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ba:	e127      	b.n	8000b0c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008bc:	2201      	movs	r2, #1
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	69fa      	ldr	r2, [r7, #28]
 80008cc:	4013      	ands	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	f040 8116 	bne.w	8000b06 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b12      	cmp	r3, #18
 80008e0:	d034      	beq.n	800094c <HAL_GPIO_Init+0xa4>
 80008e2:	2b12      	cmp	r3, #18
 80008e4:	d80d      	bhi.n	8000902 <HAL_GPIO_Init+0x5a>
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d02b      	beq.n	8000942 <HAL_GPIO_Init+0x9a>
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d804      	bhi.n	80008f8 <HAL_GPIO_Init+0x50>
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d031      	beq.n	8000956 <HAL_GPIO_Init+0xae>
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d01c      	beq.n	8000930 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008f6:	e048      	b.n	800098a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d043      	beq.n	8000984 <HAL_GPIO_Init+0xdc>
 80008fc:	2b11      	cmp	r3, #17
 80008fe:	d01b      	beq.n	8000938 <HAL_GPIO_Init+0x90>
          break;
 8000900:	e043      	b.n	800098a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000902:	4a89      	ldr	r2, [pc, #548]	; (8000b28 <HAL_GPIO_Init+0x280>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d026      	beq.n	8000956 <HAL_GPIO_Init+0xae>
 8000908:	4a87      	ldr	r2, [pc, #540]	; (8000b28 <HAL_GPIO_Init+0x280>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d806      	bhi.n	800091c <HAL_GPIO_Init+0x74>
 800090e:	4a87      	ldr	r2, [pc, #540]	; (8000b2c <HAL_GPIO_Init+0x284>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d020      	beq.n	8000956 <HAL_GPIO_Init+0xae>
 8000914:	4a86      	ldr	r2, [pc, #536]	; (8000b30 <HAL_GPIO_Init+0x288>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d01d      	beq.n	8000956 <HAL_GPIO_Init+0xae>
          break;
 800091a:	e036      	b.n	800098a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800091c:	4a85      	ldr	r2, [pc, #532]	; (8000b34 <HAL_GPIO_Init+0x28c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d019      	beq.n	8000956 <HAL_GPIO_Init+0xae>
 8000922:	4a85      	ldr	r2, [pc, #532]	; (8000b38 <HAL_GPIO_Init+0x290>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d016      	beq.n	8000956 <HAL_GPIO_Init+0xae>
 8000928:	4a84      	ldr	r2, [pc, #528]	; (8000b3c <HAL_GPIO_Init+0x294>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d013      	beq.n	8000956 <HAL_GPIO_Init+0xae>
          break;
 800092e:	e02c      	b.n	800098a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	623b      	str	r3, [r7, #32]
          break;
 8000936:	e028      	b.n	800098a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	3304      	adds	r3, #4
 800093e:	623b      	str	r3, [r7, #32]
          break;
 8000940:	e023      	b.n	800098a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	3308      	adds	r3, #8
 8000948:	623b      	str	r3, [r7, #32]
          break;
 800094a:	e01e      	b.n	800098a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	330c      	adds	r3, #12
 8000952:	623b      	str	r3, [r7, #32]
          break;
 8000954:	e019      	b.n	800098a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d102      	bne.n	8000964 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800095e:	2304      	movs	r3, #4
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e012      	b.n	800098a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d105      	bne.n	8000978 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800096c:	2308      	movs	r3, #8
 800096e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	611a      	str	r2, [r3, #16]
          break;
 8000976:	e008      	b.n	800098a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000978:	2308      	movs	r3, #8
 800097a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	615a      	str	r2, [r3, #20]
          break;
 8000982:	e002      	b.n	800098a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
          break;
 8000988:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	2bff      	cmp	r3, #255	; 0xff
 800098e:	d801      	bhi.n	8000994 <HAL_GPIO_Init+0xec>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	e001      	b.n	8000998 <HAL_GPIO_Init+0xf0>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3304      	adds	r3, #4
 8000998:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	2bff      	cmp	r3, #255	; 0xff
 800099e:	d802      	bhi.n	80009a6 <HAL_GPIO_Init+0xfe>
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	e002      	b.n	80009ac <HAL_GPIO_Init+0x104>
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	3b08      	subs	r3, #8
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	210f      	movs	r1, #15
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	401a      	ands	r2, r3
 80009be:	6a39      	ldr	r1, [r7, #32]
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	fa01 f303 	lsl.w	r3, r1, r3
 80009c6:	431a      	orrs	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	f000 8096 	beq.w	8000b06 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009da:	4b59      	ldr	r3, [pc, #356]	; (8000b40 <HAL_GPIO_Init+0x298>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	4a58      	ldr	r2, [pc, #352]	; (8000b40 <HAL_GPIO_Init+0x298>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6193      	str	r3, [r2, #24]
 80009e6:	4b56      	ldr	r3, [pc, #344]	; (8000b40 <HAL_GPIO_Init+0x298>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f2:	4a54      	ldr	r2, [pc, #336]	; (8000b44 <HAL_GPIO_Init+0x29c>)
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	089b      	lsrs	r3, r3, #2
 80009f8:	3302      	adds	r3, #2
 80009fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	220f      	movs	r2, #15
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	4013      	ands	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4b      	ldr	r2, [pc, #300]	; (8000b48 <HAL_GPIO_Init+0x2a0>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d013      	beq.n	8000a46 <HAL_GPIO_Init+0x19e>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4a      	ldr	r2, [pc, #296]	; (8000b4c <HAL_GPIO_Init+0x2a4>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d00d      	beq.n	8000a42 <HAL_GPIO_Init+0x19a>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a49      	ldr	r2, [pc, #292]	; (8000b50 <HAL_GPIO_Init+0x2a8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d007      	beq.n	8000a3e <HAL_GPIO_Init+0x196>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a48      	ldr	r2, [pc, #288]	; (8000b54 <HAL_GPIO_Init+0x2ac>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d101      	bne.n	8000a3a <HAL_GPIO_Init+0x192>
 8000a36:	2303      	movs	r3, #3
 8000a38:	e006      	b.n	8000a48 <HAL_GPIO_Init+0x1a0>
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	e004      	b.n	8000a48 <HAL_GPIO_Init+0x1a0>
 8000a3e:	2302      	movs	r3, #2
 8000a40:	e002      	b.n	8000a48 <HAL_GPIO_Init+0x1a0>
 8000a42:	2301      	movs	r3, #1
 8000a44:	e000      	b.n	8000a48 <HAL_GPIO_Init+0x1a0>
 8000a46:	2300      	movs	r3, #0
 8000a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a4a:	f002 0203 	and.w	r2, r2, #3
 8000a4e:	0092      	lsls	r2, r2, #2
 8000a50:	4093      	lsls	r3, r2
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a58:	493a      	ldr	r1, [pc, #232]	; (8000b44 <HAL_GPIO_Init+0x29c>)
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	3302      	adds	r3, #2
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d006      	beq.n	8000a80 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a72:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4938      	ldr	r1, [pc, #224]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	600b      	str	r3, [r1, #0]
 8000a7e:	e006      	b.n	8000a8e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a80:	4b35      	ldr	r3, [pc, #212]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	4933      	ldr	r1, [pc, #204]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d006      	beq.n	8000aa8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a9a:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	492e      	ldr	r1, [pc, #184]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	604b      	str	r3, [r1, #4]
 8000aa6:	e006      	b.n	8000ab6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	4929      	ldr	r1, [pc, #164]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	4924      	ldr	r1, [pc, #144]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	608b      	str	r3, [r1, #8]
 8000ace:	e006      	b.n	8000ade <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ad0:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000ad2:	689a      	ldr	r2, [r3, #8]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	491f      	ldr	r1, [pc, #124]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000ada:	4013      	ands	r3, r2
 8000adc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d006      	beq.n	8000af8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	491a      	ldr	r1, [pc, #104]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	60cb      	str	r3, [r1, #12]
 8000af6:	e006      	b.n	8000b06 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	43db      	mvns	r3, r3
 8000b00:	4915      	ldr	r1, [pc, #84]	; (8000b58 <HAL_GPIO_Init+0x2b0>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	3301      	adds	r3, #1
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	fa22 f303 	lsr.w	r3, r2, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f47f aed0 	bne.w	80008bc <HAL_GPIO_Init+0x14>
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	372c      	adds	r7, #44	; 0x2c
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	10210000 	.word	0x10210000
 8000b2c:	10110000 	.word	0x10110000
 8000b30:	10120000 	.word	0x10120000
 8000b34:	10310000 	.word	0x10310000
 8000b38:	10320000 	.word	0x10320000
 8000b3c:	10220000 	.word	0x10220000
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40010000 	.word	0x40010000
 8000b48:	40010800 	.word	0x40010800
 8000b4c:	40010c00 	.word	0x40010c00
 8000b50:	40011000 	.word	0x40011000
 8000b54:	40011400 	.word	0x40011400
 8000b58:	40010400 	.word	0x40010400

08000b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b6c:	787b      	ldrb	r3, [r7, #1]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b72:	887a      	ldrh	r2, [r7, #2]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b78:	e003      	b.n	8000b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	041a      	lsls	r2, r3, #16
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	611a      	str	r2, [r3, #16]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	041a      	lsls	r2, r3, #16
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43d9      	mvns	r1, r3
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	400b      	ands	r3, r1
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	611a      	str	r2, [r3, #16]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
	...

08000bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e26c      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 8087 	beq.w	8000cee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000be0:	4b92      	ldr	r3, [pc, #584]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 030c 	and.w	r3, r3, #12
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d00c      	beq.n	8000c06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bec:	4b8f      	ldr	r3, [pc, #572]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 030c 	and.w	r3, r3, #12
 8000bf4:	2b08      	cmp	r3, #8
 8000bf6:	d112      	bne.n	8000c1e <HAL_RCC_OscConfig+0x5e>
 8000bf8:	4b8c      	ldr	r3, [pc, #560]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c04:	d10b      	bne.n	8000c1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c06:	4b89      	ldr	r3, [pc, #548]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d06c      	beq.n	8000cec <HAL_RCC_OscConfig+0x12c>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d168      	bne.n	8000cec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e246      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c26:	d106      	bne.n	8000c36 <HAL_RCC_OscConfig+0x76>
 8000c28:	4b80      	ldr	r3, [pc, #512]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a7f      	ldr	r2, [pc, #508]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e02e      	b.n	8000c94 <HAL_RCC_OscConfig+0xd4>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10c      	bne.n	8000c58 <HAL_RCC_OscConfig+0x98>
 8000c3e:	4b7b      	ldr	r3, [pc, #492]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a7a      	ldr	r2, [pc, #488]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	4b78      	ldr	r3, [pc, #480]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a77      	ldr	r2, [pc, #476]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e01d      	b.n	8000c94 <HAL_RCC_OscConfig+0xd4>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c60:	d10c      	bne.n	8000c7c <HAL_RCC_OscConfig+0xbc>
 8000c62:	4b72      	ldr	r3, [pc, #456]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a71      	ldr	r2, [pc, #452]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4b6f      	ldr	r3, [pc, #444]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a6e      	ldr	r2, [pc, #440]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e00b      	b.n	8000c94 <HAL_RCC_OscConfig+0xd4>
 8000c7c:	4b6b      	ldr	r3, [pc, #428]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a6a      	ldr	r2, [pc, #424]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b68      	ldr	r3, [pc, #416]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a67      	ldr	r2, [pc, #412]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d013      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fd1a 	bl	80006d4 <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fd16 	bl	80006d4 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b64      	cmp	r3, #100	; 0x64
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e1fa      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb6:	4b5d      	ldr	r3, [pc, #372]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f0      	beq.n	8000ca4 <HAL_RCC_OscConfig+0xe4>
 8000cc2:	e014      	b.n	8000cee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fd06 	bl	80006d4 <HAL_GetTick>
 8000cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	e008      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ccc:	f7ff fd02 	bl	80006d4 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b64      	cmp	r3, #100	; 0x64
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e1e6      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cde:	4b53      	ldr	r3, [pc, #332]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f0      	bne.n	8000ccc <HAL_RCC_OscConfig+0x10c>
 8000cea:	e000      	b.n	8000cee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d063      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cfa:	4b4c      	ldr	r3, [pc, #304]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00b      	beq.n	8000d1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d06:	4b49      	ldr	r3, [pc, #292]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d11c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x18c>
 8000d12:	4b46      	ldr	r3, [pc, #280]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d116      	bne.n	8000d4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1e:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d005      	beq.n	8000d36 <HAL_RCC_OscConfig+0x176>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d001      	beq.n	8000d36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e1ba      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d36:	4b3d      	ldr	r3, [pc, #244]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	4939      	ldr	r1, [pc, #228]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4a:	e03a      	b.n	8000dc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d020      	beq.n	8000d96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d54:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <HAL_RCC_OscConfig+0x270>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5a:	f7ff fcbb 	bl	80006d4 <HAL_GetTick>
 8000d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	e008      	b.n	8000d74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d62:	f7ff fcb7 	bl	80006d4 <HAL_GetTick>
 8000d66:	4602      	mov	r2, r0
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d901      	bls.n	8000d74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	e19b      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f0      	beq.n	8000d62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4927      	ldr	r1, [pc, #156]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d90:	4313      	orrs	r3, r2
 8000d92:	600b      	str	r3, [r1, #0]
 8000d94:	e015      	b.n	8000dc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <HAL_RCC_OscConfig+0x270>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fc9a 	bl	80006d4 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da4:	f7ff fc96 	bl	80006d4 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e17a      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f0      	bne.n	8000da4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d03a      	beq.n	8000e44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d019      	beq.n	8000e0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_RCC_OscConfig+0x274>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fc7a 	bl	80006d4 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de4:	f7ff fc76 	bl	80006d4 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e15a      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f0      	beq.n	8000de4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f000 fb0a 	bl	800141c <RCC_Delay>
 8000e08:	e01c      	b.n	8000e44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_RCC_OscConfig+0x274>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e10:	f7ff fc60 	bl	80006d4 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e16:	e00f      	b.n	8000e38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e18:	f7ff fc5c 	bl	80006d4 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d908      	bls.n	8000e38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e140      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	42420000 	.word	0x42420000
 8000e34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e38:	4b9e      	ldr	r3, [pc, #632]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1e9      	bne.n	8000e18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 80a6 	beq.w	8000f9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e56:	4b97      	ldr	r3, [pc, #604]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10d      	bne.n	8000e7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4b94      	ldr	r3, [pc, #592]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a93      	ldr	r2, [pc, #588]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b91      	ldr	r3, [pc, #580]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7e:	4b8e      	ldr	r3, [pc, #568]	; (80010b8 <HAL_RCC_OscConfig+0x4f8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d118      	bne.n	8000ebc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e8a:	4b8b      	ldr	r3, [pc, #556]	; (80010b8 <HAL_RCC_OscConfig+0x4f8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a8a      	ldr	r2, [pc, #552]	; (80010b8 <HAL_RCC_OscConfig+0x4f8>)
 8000e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e96:	f7ff fc1d 	bl	80006d4 <HAL_GetTick>
 8000e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9c:	e008      	b.n	8000eb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e9e:	f7ff fc19 	bl	80006d4 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b64      	cmp	r3, #100	; 0x64
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e0fd      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb0:	4b81      	ldr	r3, [pc, #516]	; (80010b8 <HAL_RCC_OscConfig+0x4f8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f0      	beq.n	8000e9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x312>
 8000ec4:	4b7b      	ldr	r3, [pc, #492]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4a7a      	ldr	r2, [pc, #488]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6213      	str	r3, [r2, #32]
 8000ed0:	e02d      	b.n	8000f2e <HAL_RCC_OscConfig+0x36e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x334>
 8000eda:	4b76      	ldr	r3, [pc, #472]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a75      	ldr	r2, [pc, #468]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	6213      	str	r3, [r2, #32]
 8000ee6:	4b73      	ldr	r3, [pc, #460]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	4a72      	ldr	r2, [pc, #456]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	6213      	str	r3, [r2, #32]
 8000ef2:	e01c      	b.n	8000f2e <HAL_RCC_OscConfig+0x36e>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d10c      	bne.n	8000f16 <HAL_RCC_OscConfig+0x356>
 8000efc:	4b6d      	ldr	r3, [pc, #436]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	4a6c      	ldr	r2, [pc, #432]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6213      	str	r3, [r2, #32]
 8000f08:	4b6a      	ldr	r3, [pc, #424]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	4a69      	ldr	r2, [pc, #420]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6213      	str	r3, [r2, #32]
 8000f14:	e00b      	b.n	8000f2e <HAL_RCC_OscConfig+0x36e>
 8000f16:	4b67      	ldr	r3, [pc, #412]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	4a66      	ldr	r2, [pc, #408]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	6213      	str	r3, [r2, #32]
 8000f22:	4b64      	ldr	r3, [pc, #400]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4a63      	ldr	r2, [pc, #396]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f28:	f023 0304 	bic.w	r3, r3, #4
 8000f2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d015      	beq.n	8000f62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fbcd 	bl	80006d4 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fbc9 	bl	80006d4 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e0ab      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f54:	4b57      	ldr	r3, [pc, #348]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0ee      	beq.n	8000f3e <HAL_RCC_OscConfig+0x37e>
 8000f60:	e014      	b.n	8000f8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f62:	f7ff fbb7 	bl	80006d4 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f68:	e00a      	b.n	8000f80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f6a:	f7ff fbb3 	bl	80006d4 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e095      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f80:	4b4c      	ldr	r3, [pc, #304]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1ee      	bne.n	8000f6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f8c:	7dfb      	ldrb	r3, [r7, #23]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d105      	bne.n	8000f9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a47      	ldr	r2, [pc, #284]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 8081 	beq.w	80010aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa8:	4b42      	ldr	r3, [pc, #264]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 030c 	and.w	r3, r3, #12
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d061      	beq.n	8001078 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d146      	bne.n	800104a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fbc:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <HAL_RCC_OscConfig+0x4fc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fb87 	bl	80006d4 <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fca:	f7ff fb83 	bl	80006d4 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e067      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fdc:	4b35      	ldr	r3, [pc, #212]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f0      	bne.n	8000fca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff0:	d108      	bne.n	8001004 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ff2:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	492d      	ldr	r1, [pc, #180]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a19      	ldr	r1, [r3, #32]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	430b      	orrs	r3, r1
 8001016:	4927      	ldr	r1, [pc, #156]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800101c:	4b27      	ldr	r3, [pc, #156]	; (80010bc <HAL_RCC_OscConfig+0x4fc>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fb57 	bl	80006d4 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102a:	f7ff fb53 	bl	80006d4 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e037      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x46a>
 8001048:	e02f      	b.n	80010aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_RCC_OscConfig+0x4fc>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fb40 	bl	80006d4 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001058:	f7ff fb3c 	bl	80006d4 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e020      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x498>
 8001076:	e018      	b.n	80010aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d101      	bne.n	8001084 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e013      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_RCC_OscConfig+0x4f4>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	429a      	cmp	r2, r3
 8001096:	d106      	bne.n	80010a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d001      	beq.n	80010aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40007000 	.word	0x40007000
 80010bc:	42420060 	.word	0x42420060

080010c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e0d0      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010d4:	4b6a      	ldr	r3, [pc, #424]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d910      	bls.n	8001104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e2:	4b67      	ldr	r3, [pc, #412]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 0207 	bic.w	r2, r3, #7
 80010ea:	4965      	ldr	r1, [pc, #404]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f2:	4b63      	ldr	r3, [pc, #396]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d001      	beq.n	8001104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e0b8      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d020      	beq.n	8001152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800111c:	4b59      	ldr	r3, [pc, #356]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a58      	ldr	r2, [pc, #352]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001134:	4b53      	ldr	r3, [pc, #332]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	4a52      	ldr	r2, [pc, #328]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800113e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001140:	4b50      	ldr	r3, [pc, #320]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	494d      	ldr	r1, [pc, #308]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	4313      	orrs	r3, r2
 8001150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	2b00      	cmp	r3, #0
 800115c:	d040      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d107      	bne.n	8001176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	4b47      	ldr	r3, [pc, #284]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d115      	bne.n	800119e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e07f      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d107      	bne.n	800118e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117e:	4b41      	ldr	r3, [pc, #260]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d109      	bne.n	800119e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e073      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118e:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e06b      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119e:	4b39      	ldr	r3, [pc, #228]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f023 0203 	bic.w	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4936      	ldr	r1, [pc, #216]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b0:	f7ff fa90 	bl	80006d4 <HAL_GetTick>
 80011b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b6:	e00a      	b.n	80011ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b8:	f7ff fa8c 	bl	80006d4 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e053      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 020c 	and.w	r2, r3, #12
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	429a      	cmp	r2, r3
 80011de:	d1eb      	bne.n	80011b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011e0:	4b27      	ldr	r3, [pc, #156]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d210      	bcs.n	8001210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	4b24      	ldr	r3, [pc, #144]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f023 0207 	bic.w	r2, r3, #7
 80011f6:	4922      	ldr	r1, [pc, #136]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d001      	beq.n	8001210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e032      	b.n	8001276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800121c:	4b19      	ldr	r3, [pc, #100]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	4916      	ldr	r1, [pc, #88]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	4313      	orrs	r3, r2
 800122c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d009      	beq.n	800124e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	490e      	ldr	r1, [pc, #56]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800124e:	f000 f821 	bl	8001294 <HAL_RCC_GetSysClockFreq>
 8001252:	4601      	mov	r1, r0
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_RCC_ClockConfig+0x1c8>)
 8001260:	5cd3      	ldrb	r3, [r2, r3]
 8001262:	fa21 f303 	lsr.w	r3, r1, r3
 8001266:	4a09      	ldr	r2, [pc, #36]	; (800128c <HAL_RCC_ClockConfig+0x1cc>)
 8001268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_RCC_ClockConfig+0x1d0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f962 	bl	8000538 <HAL_InitTick>

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40022000 	.word	0x40022000
 8001284:	40021000 	.word	0x40021000
 8001288:	080030e4 	.word	0x080030e4
 800128c:	20000000 	.word	0x20000000
 8001290:	20000004 	.word	0x20000004

08001294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001294:	b490      	push	{r4, r7}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_RCC_GetSysClockFreq+0xb0>)
 800129c:	1d3c      	adds	r4, r7, #4
 800129e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <HAL_RCC_GetSysClockFreq+0xb8>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d002      	beq.n	80012d4 <HAL_RCC_GetSysClockFreq+0x40>
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d003      	beq.n	80012da <HAL_RCC_GetSysClockFreq+0x46>
 80012d2:	e02d      	b.n	8001330 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012d6:	623b      	str	r3, [r7, #32]
      break;
 80012d8:	e02d      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	0c9b      	lsrs	r3, r3, #18
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012e6:	4413      	add	r3, r2
 80012e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d013      	beq.n	8001320 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_RCC_GetSysClockFreq+0xb8>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	0c5b      	lsrs	r3, r3, #17
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001306:	4413      	add	r3, r2
 8001308:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800130c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001312:	fb02 f203 	mul.w	r2, r2, r3
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	fbb2 f3f3 	udiv	r3, r2, r3
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
 800131e:	e004      	b.n	800132a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	4a0c      	ldr	r2, [pc, #48]	; (8001354 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	623b      	str	r3, [r7, #32]
      break;
 800132e:	e002      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001332:	623b      	str	r3, [r7, #32]
      break;
 8001334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001336:	6a3b      	ldr	r3, [r7, #32]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bc90      	pop	{r4, r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	080030c8 	.word	0x080030c8
 8001348:	080030d8 	.word	0x080030d8
 800134c:	40021000 	.word	0x40021000
 8001350:	007a1200 	.word	0x007a1200
 8001354:	003d0900 	.word	0x003d0900

08001358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800135c:	4b02      	ldr	r3, [pc, #8]	; (8001368 <HAL_RCC_GetHCLKFreq+0x10>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	20000000 	.word	0x20000000

0800136c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001370:	f7ff fff2 	bl	8001358 <HAL_RCC_GetHCLKFreq>
 8001374:	4601      	mov	r1, r0
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	0a1b      	lsrs	r3, r3, #8
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	4a03      	ldr	r2, [pc, #12]	; (8001390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001382:	5cd3      	ldrb	r3, [r2, r3]
 8001384:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001388:	4618      	mov	r0, r3
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000
 8001390:	080030f4 	.word	0x080030f4

08001394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001398:	f7ff ffde 	bl	8001358 <HAL_RCC_GetHCLKFreq>
 800139c:	4601      	mov	r1, r0
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	0adb      	lsrs	r3, r3, #11
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	4a03      	ldr	r2, [pc, #12]	; (80013b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40021000 	.word	0x40021000
 80013b8:	080030f4 	.word	0x080030f4

080013bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	220f      	movs	r2, #15
 80013ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_RCC_GetClockConfig+0x58>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_RCC_GetClockConfig+0x58>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_RCC_GetClockConfig+0x58>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_RCC_GetClockConfig+0x58>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_RCC_GetClockConfig+0x5c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0207 	and.w	r2, r3, #7
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	40021000 	.word	0x40021000
 8001418:	40022000 	.word	0x40022000

0800141c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <RCC_Delay+0x34>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <RCC_Delay+0x38>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	0a5b      	lsrs	r3, r3, #9
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	fb02 f303 	mul.w	r3, r2, r3
 8001436:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001438:	bf00      	nop
  }
  while (Delay --);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1e5a      	subs	r2, r3, #1
 800143e:	60fa      	str	r2, [r7, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f9      	bne.n	8001438 <RCC_Delay+0x1c>
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000000 	.word	0x20000000
 8001454:	10624dd3 	.word	0x10624dd3

08001458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e041      	b.n	80014ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d106      	bne.n	8001484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f839 	bl	80014f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2202      	movs	r2, #2
 8001488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3304      	adds	r3, #4
 8001494:	4619      	mov	r1, r3
 8001496:	4610      	mov	r0, r2
 8001498:	f000 f9b4 	bl	8001804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b01      	cmp	r3, #1
 800151a:	d001      	beq.n	8001520 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e03a      	b.n	8001596 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2202      	movs	r2, #2
 8001524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <HAL_TIM_Base_Start_IT+0x98>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d00e      	beq.n	8001560 <HAL_TIM_Base_Start_IT+0x58>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800154a:	d009      	beq.n	8001560 <HAL_TIM_Base_Start_IT+0x58>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d004      	beq.n	8001560 <HAL_TIM_Base_Start_IT+0x58>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a13      	ldr	r2, [pc, #76]	; (80015a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d111      	bne.n	8001584 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b06      	cmp	r3, #6
 8001570:	d010      	beq.n	8001594 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0201 	orr.w	r2, r2, #1
 8001580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001582:	e007      	b.n	8001594 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 0201 	orr.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	40012c00 	.word	0x40012c00
 80015a4:	40000400 	.word	0x40000400
 80015a8:	40000800 	.word	0x40000800

080015ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d122      	bne.n	8001608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d11b      	bne.n	8001608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f06f 0202 	mvn.w	r2, #2
 80015d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f8ed 	bl	80017ce <HAL_TIM_IC_CaptureCallback>
 80015f4:	e005      	b.n	8001602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f8e0 	bl	80017bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f8ef 	bl	80017e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	f003 0304 	and.w	r3, r3, #4
 8001612:	2b04      	cmp	r3, #4
 8001614:	d122      	bne.n	800165c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b04      	cmp	r3, #4
 8001622:	d11b      	bne.n	800165c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f06f 0204 	mvn.w	r2, #4
 800162c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2202      	movs	r2, #2
 8001632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f8c3 	bl	80017ce <HAL_TIM_IC_CaptureCallback>
 8001648:	e005      	b.n	8001656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f8b6 	bl	80017bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f8c5 	bl	80017e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b08      	cmp	r3, #8
 8001668:	d122      	bne.n	80016b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b08      	cmp	r3, #8
 8001676:	d11b      	bne.n	80016b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f06f 0208 	mvn.w	r2, #8
 8001680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2204      	movs	r2, #4
 8001686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f899 	bl	80017ce <HAL_TIM_IC_CaptureCallback>
 800169c:	e005      	b.n	80016aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f88c 	bl	80017bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f89b 	bl	80017e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b10      	cmp	r3, #16
 80016bc:	d122      	bne.n	8001704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0310 	and.w	r3, r3, #16
 80016c8:	2b10      	cmp	r3, #16
 80016ca:	d11b      	bne.n	8001704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f06f 0210 	mvn.w	r2, #16
 80016d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2208      	movs	r2, #8
 80016da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f86f 	bl	80017ce <HAL_TIM_IC_CaptureCallback>
 80016f0:	e005      	b.n	80016fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f862 	bl	80017bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f871 	bl	80017e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b01      	cmp	r3, #1
 8001710:	d10e      	bne.n	8001730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b01      	cmp	r3, #1
 800171e:	d107      	bne.n	8001730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f06f 0201 	mvn.w	r2, #1
 8001728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7fe fe6e 	bl	800040c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173a:	2b80      	cmp	r3, #128	; 0x80
 800173c:	d10e      	bne.n	800175c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001748:	2b80      	cmp	r3, #128	; 0x80
 800174a:	d107      	bne.n	800175c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f8bf 	bl	80018da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001766:	2b40      	cmp	r3, #64	; 0x40
 8001768:	d10e      	bne.n	8001788 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001774:	2b40      	cmp	r3, #64	; 0x40
 8001776:	d107      	bne.n	8001788 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f835 	bl	80017f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	f003 0320 	and.w	r3, r3, #32
 8001792:	2b20      	cmp	r3, #32
 8001794:	d10e      	bne.n	80017b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	f003 0320 	and.w	r3, r3, #32
 80017a0:	2b20      	cmp	r3, #32
 80017a2:	d107      	bne.n	80017b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f06f 0220 	mvn.w	r2, #32
 80017ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f88a 	bl	80018c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a29      	ldr	r2, [pc, #164]	; (80018bc <TIM_Base_SetConfig+0xb8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00b      	beq.n	8001834 <TIM_Base_SetConfig+0x30>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001822:	d007      	beq.n	8001834 <TIM_Base_SetConfig+0x30>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a26      	ldr	r2, [pc, #152]	; (80018c0 <TIM_Base_SetConfig+0xbc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d003      	beq.n	8001834 <TIM_Base_SetConfig+0x30>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <TIM_Base_SetConfig+0xc0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d108      	bne.n	8001846 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800183a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4313      	orrs	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a1c      	ldr	r2, [pc, #112]	; (80018bc <TIM_Base_SetConfig+0xb8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00b      	beq.n	8001866 <TIM_Base_SetConfig+0x62>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001854:	d007      	beq.n	8001866 <TIM_Base_SetConfig+0x62>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a19      	ldr	r2, [pc, #100]	; (80018c0 <TIM_Base_SetConfig+0xbc>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d003      	beq.n	8001866 <TIM_Base_SetConfig+0x62>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a18      	ldr	r2, [pc, #96]	; (80018c4 <TIM_Base_SetConfig+0xc0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d108      	bne.n	8001878 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800186c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4313      	orrs	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	4313      	orrs	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <TIM_Base_SetConfig+0xb8>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d103      	bne.n	80018ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	615a      	str	r2, [r3, #20]
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	40012c00 	.word	0x40012c00
 80018c0:	40000400 	.word	0x40000400
 80018c4:	40000800 	.word	0x40000800

080018c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e03f      	b.n	800197e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7fe fdc4 	bl	80004a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2224      	movs	r2, #36	; 0x24
 800191c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800192e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f905 	bl	8001b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001954:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001964:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2220      	movs	r2, #32
 8001978:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b08a      	sub	sp, #40	; 0x28
 800198a:	af02      	add	r7, sp, #8
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b20      	cmp	r3, #32
 80019a4:	d17c      	bne.n	8001aa0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <HAL_UART_Transmit+0x2c>
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e075      	b.n	8001aa2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_UART_Transmit+0x3e>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e06e      	b.n	8001aa2 <HAL_UART_Transmit+0x11c>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2221      	movs	r2, #33	; 0x21
 80019d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80019da:	f7fe fe7b 	bl	80006d4 <HAL_GetTick>
 80019de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	88fa      	ldrh	r2, [r7, #6]
 80019e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	88fa      	ldrh	r2, [r7, #6]
 80019ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f4:	d108      	bne.n	8001a08 <HAL_UART_Transmit+0x82>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d104      	bne.n	8001a08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	e003      	b.n	8001a10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001a18:	e02a      	b.n	8001a70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2200      	movs	r2, #0
 8001a22:	2180      	movs	r1, #128	; 0x80
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 f840 	bl	8001aaa <UART_WaitOnFlagUntilTimeout>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e036      	b.n	8001aa2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10b      	bne.n	8001a52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	e007      	b.n	8001a62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1cf      	bne.n	8001a1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2200      	movs	r2, #0
 8001a82:	2140      	movs	r1, #64	; 0x40
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f810 	bl	8001aaa <UART_WaitOnFlagUntilTimeout>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e006      	b.n	8001aa2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e000      	b.n	8001aa2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001aa0:	2302      	movs	r3, #2
  }
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aba:	e02c      	b.n	8001b16 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac2:	d028      	beq.n	8001b16 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <UART_WaitOnFlagUntilTimeout+0x30>
 8001aca:	f7fe fe03 	bl	80006d4 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d21d      	bcs.n	8001b16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ae8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2220      	movs	r2, #32
 8001afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2220      	movs	r2, #32
 8001b06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e00f      	b.n	8001b36 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	bf0c      	ite	eq
 8001b26:	2301      	moveq	r3, #1
 8001b28:	2300      	movne	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d0c3      	beq.n	8001abc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689a      	ldr	r2, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001b7a:	f023 030c 	bic.w	r3, r3, #12
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	68b9      	ldr	r1, [r7, #8]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699a      	ldr	r2, [r3, #24]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2c      	ldr	r2, [pc, #176]	; (8001c54 <UART_SetConfig+0x114>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d103      	bne.n	8001bb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ba8:	f7ff fbf4 	bl	8001394 <HAL_RCC_GetPCLK2Freq>
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	e002      	b.n	8001bb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001bb0:	f7ff fbdc 	bl	800136c <HAL_RCC_GetPCLK1Freq>
 8001bb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009a      	lsls	r2, r3, #2
 8001bc0:	441a      	add	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bcc:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <UART_SetConfig+0x118>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	0119      	lsls	r1, r3, #4
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	009a      	lsls	r2, r3, #2
 8001be0:	441a      	add	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <UART_SetConfig+0x118>)
 8001bee:	fba3 0302 	umull	r0, r3, r3, r2
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2064      	movs	r0, #100	; 0x64
 8001bf6:	fb00 f303 	mul.w	r3, r0, r3
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	3332      	adds	r3, #50	; 0x32
 8001c00:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <UART_SetConfig+0x118>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c0c:	4419      	add	r1, r3
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	009a      	lsls	r2, r3, #2
 8001c18:	441a      	add	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <UART_SetConfig+0x118>)
 8001c26:	fba3 0302 	umull	r0, r3, r3, r2
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	2064      	movs	r0, #100	; 0x64
 8001c2e:	fb00 f303 	mul.w	r3, r0, r3
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	3332      	adds	r3, #50	; 0x32
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <UART_SetConfig+0x118>)
 8001c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	f003 020f 	and.w	r2, r3, #15
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	440a      	add	r2, r1
 8001c4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40013800 	.word	0x40013800
 8001c58:	51eb851f 	.word	0x51eb851f

08001c5c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c6e:	2b84      	cmp	r3, #132	; 0x84
 8001c70:	d005      	beq.n	8001c7e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001c72:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4413      	add	r3, r2
 8001c7a:	3303      	adds	r3, #3
 8001c7c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001c8e:	f000 facd 	bl	800222c <vTaskStartScheduler>
  
  return osOK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af04      	add	r7, sp, #16
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d020      	beq.n	8001cec <osThreadCreate+0x54>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01c      	beq.n	8001cec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685c      	ldr	r4, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681d      	ldr	r5, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691e      	ldr	r6, [r3, #16]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ffc9 	bl	8001c5c <makeFreeRtosPriority>
 8001cca:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cd4:	9202      	str	r2, [sp, #8]
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	9100      	str	r1, [sp, #0]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	4632      	mov	r2, r6
 8001cde:	4629      	mov	r1, r5
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f000 f8e8 	bl	8001eb6 <xTaskCreateStatic>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	e01c      	b.n	8001d26 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685c      	ldr	r4, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cf8:	b29e      	uxth	r6, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ffab 	bl	8001c5c <makeFreeRtosPriority>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	9200      	str	r2, [sp, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	4632      	mov	r2, r6
 8001d14:	4629      	mov	r1, r5
 8001d16:	4620      	mov	r0, r4
 8001d18:	f000 f926 	bl	8001f68 <xTaskCreate>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d001      	beq.n	8001d26 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d30 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <osDelay+0x16>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	e000      	b.n	8001d48 <osDelay+0x18>
 8001d46:	2301      	movs	r3, #1
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fa3b 	bl	80021c4 <vTaskDelay>
  
  return osOK;
 8001d4e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f103 0208 	add.w	r2, r3, #8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f103 0208 	add.w	r2, r3, #8
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f103 0208 	add.w	r2, r3, #8
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	601a      	str	r2, [r3, #0]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0a:	d103      	bne.n	8001e14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	e00c      	b.n	8001e2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3308      	adds	r3, #8
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	e002      	b.n	8001e22 <vListInsert+0x2e>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d2f6      	bcs.n	8001e1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	601a      	str	r2, [r3, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6892      	ldr	r2, [r2, #8]
 8001e7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6852      	ldr	r2, [r2, #4]
 8001e84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d103      	bne.n	8001e98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	1e5a      	subs	r2, r3, #1
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b08e      	sub	sp, #56	; 0x38
 8001eba:	af04      	add	r7, sp, #16
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ece:	f383 8811 	msr	BASEPRI, r3
 8001ed2:	f3bf 8f6f 	isb	sy
 8001ed6:	f3bf 8f4f 	dsb	sy
 8001eda:	623b      	str	r3, [r7, #32]
 8001edc:	e7fe      	b.n	8001edc <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <xTaskCreateStatic+0x42>
 8001ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee8:	f383 8811 	msr	BASEPRI, r3
 8001eec:	f3bf 8f6f 	isb	sy
 8001ef0:	f3bf 8f4f 	dsb	sy
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	e7fe      	b.n	8001ef6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001ef8:	2354      	movs	r3, #84	; 0x54
 8001efa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b54      	cmp	r3, #84	; 0x54
 8001f00:	d009      	beq.n	8001f16 <xTaskCreateStatic+0x60>
 8001f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f06:	f383 8811 	msr	BASEPRI, r3
 8001f0a:	f3bf 8f6f 	isb	sy
 8001f0e:	f3bf 8f4f 	dsb	sy
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	e7fe      	b.n	8001f14 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01e      	beq.n	8001f5a <xTaskCreateStatic+0xa4>
 8001f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01b      	beq.n	8001f5a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001f34:	2300      	movs	r3, #0
 8001f36:	9303      	str	r3, [sp, #12]
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	9302      	str	r3, [sp, #8]
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f850 	bl	8001ff2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001f52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f54:	f000 f8cc 	bl	80020f0 <prvAddNewTaskToReadyList>
 8001f58:	e001      	b.n	8001f5e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001f5e:	697b      	ldr	r3, [r7, #20]
	}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3728      	adds	r7, #40	; 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08c      	sub	sp, #48	; 0x30
 8001f6c:	af04      	add	r7, sp, #16
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fe55 	bl	8002c2c <pvPortMalloc>
 8001f82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00e      	beq.n	8001fa8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001f8a:	2054      	movs	r0, #84	; 0x54
 8001f8c:	f000 fe4e 	bl	8002c2c <pvPortMalloc>
 8001f90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f9e:	e005      	b.n	8001fac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001fa0:	6978      	ldr	r0, [r7, #20]
 8001fa2:	f000 ff05 	bl	8002db0 <vPortFree>
 8001fa6:	e001      	b.n	8001fac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d017      	beq.n	8001fe2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9303      	str	r3, [sp, #12]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	9302      	str	r3, [sp, #8]
 8001fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f80e 	bl	8001ff2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001fd6:	69f8      	ldr	r0, [r7, #28]
 8001fd8:	f000 f88a 	bl	80020f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	e002      	b.n	8001fe8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001fe8:	69bb      	ldr	r3, [r7, #24]
	}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b088      	sub	sp, #32
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800200a:	3b01      	subs	r3, #1
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	f023 0307 	bic.w	r3, r3, #7
 8002018:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	2b00      	cmp	r3, #0
 8002022:	d009      	beq.n	8002038 <prvInitialiseNewTask+0x46>
 8002024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002028:	f383 8811 	msr	BASEPRI, r3
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e7fe      	b.n	8002036 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002038:	2300      	movs	r3, #0
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	e012      	b.n	8002064 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	4413      	add	r3, r2
 8002044:	7819      	ldrb	r1, [r3, #0]
 8002046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	4413      	add	r3, r2
 800204c:	3334      	adds	r3, #52	; 0x34
 800204e:	460a      	mov	r2, r1
 8002050:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d006      	beq.n	800206c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3301      	adds	r3, #1
 8002062:	61fb      	str	r3, [r7, #28]
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	2b0f      	cmp	r3, #15
 8002068:	d9e9      	bls.n	800203e <prvInitialiseNewTask+0x4c>
 800206a:	e000      	b.n	800206e <prvInitialiseNewTask+0x7c>
		{
			break;
 800206c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	2b06      	cmp	r3, #6
 800207a:	d901      	bls.n	8002080 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800207c:	2306      	movs	r3, #6
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800208a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800208c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208e:	2200      	movs	r2, #0
 8002090:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002094:	3304      	adds	r3, #4
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fe7d 	bl	8001d96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800209c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209e:	3318      	adds	r3, #24
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fe78 	bl	8001d96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	f1c3 0207 	rsb	r2, r3, #7
 80020b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80020b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80020bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020be:	2200      	movs	r2, #0
 80020c0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80020c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	69b8      	ldr	r0, [r7, #24]
 80020d0:	f000 fc06 	bl	80028e0 <pxPortInitialiseStack>
 80020d4:	4602      	mov	r2, r0
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020e6:	bf00      	nop
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80020f8:	f000 fcde 	bl	8002ab8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80020fc:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <prvAddNewTaskToReadyList+0xb8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	4a29      	ldr	r2, [pc, #164]	; (80021a8 <prvAddNewTaskToReadyList+0xb8>)
 8002104:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002106:	4b29      	ldr	r3, [pc, #164]	; (80021ac <prvAddNewTaskToReadyList+0xbc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800210e:	4a27      	ldr	r2, [pc, #156]	; (80021ac <prvAddNewTaskToReadyList+0xbc>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002114:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <prvAddNewTaskToReadyList+0xb8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d110      	bne.n	800213e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800211c:	f000 fabc 	bl	8002698 <prvInitialiseTaskLists>
 8002120:	e00d      	b.n	800213e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002122:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <prvAddNewTaskToReadyList+0xc0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <prvAddNewTaskToReadyList+0xbc>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	429a      	cmp	r2, r3
 8002136:	d802      	bhi.n	800213e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002138:	4a1c      	ldr	r2, [pc, #112]	; (80021ac <prvAddNewTaskToReadyList+0xbc>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <prvAddNewTaskToReadyList+0xc4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	3301      	adds	r3, #1
 8002144:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <prvAddNewTaskToReadyList+0xc4>)
 8002146:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	2201      	movs	r2, #1
 800214e:	409a      	lsls	r2, r3
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <prvAddNewTaskToReadyList+0xc8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4313      	orrs	r3, r2
 8002156:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <prvAddNewTaskToReadyList+0xc8>)
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215e:	4613      	mov	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4a15      	ldr	r2, [pc, #84]	; (80021bc <prvAddNewTaskToReadyList+0xcc>)
 8002168:	441a      	add	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3304      	adds	r3, #4
 800216e:	4619      	mov	r1, r3
 8002170:	4610      	mov	r0, r2
 8002172:	f7ff fe1c 	bl	8001dae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002176:	f000 fccd 	bl	8002b14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <prvAddNewTaskToReadyList+0xc0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00e      	beq.n	80021a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <prvAddNewTaskToReadyList+0xbc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	429a      	cmp	r2, r3
 800218e:	d207      	bcs.n	80021a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <prvAddNewTaskToReadyList+0xd0>)
 8002192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	f3bf 8f4f 	dsb	sy
 800219c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000380 	.word	0x20000380
 80021ac:	20000280 	.word	0x20000280
 80021b0:	2000038c 	.word	0x2000038c
 80021b4:	2000039c 	.word	0x2000039c
 80021b8:	20000388 	.word	0x20000388
 80021bc:	20000284 	.word	0x20000284
 80021c0:	e000ed04 	.word	0xe000ed04

080021c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d016      	beq.n	8002204 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <vTaskDelay+0x60>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <vTaskDelay+0x2e>
 80021de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	f3bf 8f6f 	isb	sy
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	e7fe      	b.n	80021f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80021f2:	f000 f879 	bl	80022e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80021f6:	2100      	movs	r1, #0
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fb0b 	bl	8002814 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80021fe:	f000 f881 	bl	8002304 <xTaskResumeAll>
 8002202:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d107      	bne.n	800221a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <vTaskDelay+0x64>)
 800220c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	f3bf 8f4f 	dsb	sy
 8002216:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200003a8 	.word	0x200003a8
 8002228:	e000ed04 	.word	0xe000ed04

0800222c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800223a:	463a      	mov	r2, r7
 800223c:	1d39      	adds	r1, r7, #4
 800223e:	f107 0308 	add.w	r3, r7, #8
 8002242:	4618      	mov	r0, r3
 8002244:	f7fd ff84 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002248:	6839      	ldr	r1, [r7, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	9202      	str	r2, [sp, #8]
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	2300      	movs	r3, #0
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	2300      	movs	r3, #0
 8002258:	460a      	mov	r2, r1
 800225a:	491d      	ldr	r1, [pc, #116]	; (80022d0 <vTaskStartScheduler+0xa4>)
 800225c:	481d      	ldr	r0, [pc, #116]	; (80022d4 <vTaskStartScheduler+0xa8>)
 800225e:	f7ff fe2a 	bl	8001eb6 <xTaskCreateStatic>
 8002262:	4602      	mov	r2, r0
 8002264:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <vTaskStartScheduler+0xac>)
 8002266:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <vTaskStartScheduler+0xac>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002270:	2301      	movs	r3, #1
 8002272:	617b      	str	r3, [r7, #20]
 8002274:	e001      	b.n	800227a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d115      	bne.n	80022ac <vTaskStartScheduler+0x80>
 8002280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <vTaskStartScheduler+0xb0>)
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <vTaskStartScheduler+0xb4>)
 800229c:	2201      	movs	r2, #1
 800229e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <vTaskStartScheduler+0xb8>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80022a6:	f000 fb97 	bl	80029d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80022aa:	e00d      	b.n	80022c8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b2:	d109      	bne.n	80022c8 <vTaskStartScheduler+0x9c>
 80022b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b8:	f383 8811 	msr	BASEPRI, r3
 80022bc:	f3bf 8f6f 	isb	sy
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	e7fe      	b.n	80022c6 <vTaskStartScheduler+0x9a>
}
 80022c8:	bf00      	nop
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	080030dc 	.word	0x080030dc
 80022d4:	08002669 	.word	0x08002669
 80022d8:	200003a4 	.word	0x200003a4
 80022dc:	200003a0 	.word	0x200003a0
 80022e0:	2000038c 	.word	0x2000038c
 80022e4:	20000384 	.word	0x20000384

080022e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <vTaskSuspendAll+0x18>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	4a03      	ldr	r2, [pc, #12]	; (8002300 <vTaskSuspendAll+0x18>)
 80022f4:	6013      	str	r3, [r2, #0]
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200003a8 	.word	0x200003a8

08002304 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002312:	4b41      	ldr	r3, [pc, #260]	; (8002418 <xTaskResumeAll+0x114>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d109      	bne.n	800232e <xTaskResumeAll+0x2a>
 800231a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231e:	f383 8811 	msr	BASEPRI, r3
 8002322:	f3bf 8f6f 	isb	sy
 8002326:	f3bf 8f4f 	dsb	sy
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	e7fe      	b.n	800232c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800232e:	f000 fbc3 	bl	8002ab8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002332:	4b39      	ldr	r3, [pc, #228]	; (8002418 <xTaskResumeAll+0x114>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3b01      	subs	r3, #1
 8002338:	4a37      	ldr	r2, [pc, #220]	; (8002418 <xTaskResumeAll+0x114>)
 800233a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800233c:	4b36      	ldr	r3, [pc, #216]	; (8002418 <xTaskResumeAll+0x114>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d161      	bne.n	8002408 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002344:	4b35      	ldr	r3, [pc, #212]	; (800241c <xTaskResumeAll+0x118>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d05d      	beq.n	8002408 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800234c:	e02e      	b.n	80023ac <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800234e:	4b34      	ldr	r3, [pc, #208]	; (8002420 <xTaskResumeAll+0x11c>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3318      	adds	r3, #24
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fd82 	bl	8001e64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3304      	adds	r3, #4
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fd7d 	bl	8001e64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	2201      	movs	r2, #1
 8002370:	409a      	lsls	r2, r3
 8002372:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <xTaskResumeAll+0x120>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	4a2a      	ldr	r2, [pc, #168]	; (8002424 <xTaskResumeAll+0x120>)
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4a27      	ldr	r2, [pc, #156]	; (8002428 <xTaskResumeAll+0x124>)
 800238a:	441a      	add	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3304      	adds	r3, #4
 8002390:	4619      	mov	r1, r3
 8002392:	4610      	mov	r0, r2
 8002394:	f7ff fd0b 	bl	8001dae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800239c:	4b23      	ldr	r3, [pc, #140]	; (800242c <xTaskResumeAll+0x128>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d302      	bcc.n	80023ac <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80023a6:	4b22      	ldr	r3, [pc, #136]	; (8002430 <xTaskResumeAll+0x12c>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023ac:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <xTaskResumeAll+0x11c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1cc      	bne.n	800234e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80023ba:	f000 fa07 	bl	80027cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <xTaskResumeAll+0x130>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d010      	beq.n	80023ec <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80023ca:	f000 f837 	bl	800243c <xTaskIncrementTick>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <xTaskResumeAll+0x12c>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3b01      	subs	r3, #1
 80023de:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f1      	bne.n	80023ca <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80023e6:	4b13      	ldr	r3, [pc, #76]	; (8002434 <xTaskResumeAll+0x130>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <xTaskResumeAll+0x12c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80023f4:	2301      	movs	r3, #1
 80023f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <xTaskResumeAll+0x134>)
 80023fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002408:	f000 fb84 	bl	8002b14 <vPortExitCritical>

	return xAlreadyYielded;
 800240c:	68bb      	ldr	r3, [r7, #8]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200003a8 	.word	0x200003a8
 800241c:	20000380 	.word	0x20000380
 8002420:	20000340 	.word	0x20000340
 8002424:	20000388 	.word	0x20000388
 8002428:	20000284 	.word	0x20000284
 800242c:	20000280 	.word	0x20000280
 8002430:	20000394 	.word	0x20000394
 8002434:	20000390 	.word	0x20000390
 8002438:	e000ed04 	.word	0xe000ed04

0800243c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002446:	4b50      	ldr	r3, [pc, #320]	; (8002588 <xTaskIncrementTick+0x14c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 808c 	bne.w	8002568 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002450:	4b4e      	ldr	r3, [pc, #312]	; (800258c <xTaskIncrementTick+0x150>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	3301      	adds	r3, #1
 8002456:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002458:	4a4c      	ldr	r2, [pc, #304]	; (800258c <xTaskIncrementTick+0x150>)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d11f      	bne.n	80024a4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002464:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <xTaskIncrementTick+0x154>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <xTaskIncrementTick+0x46>
 800246e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002472:	f383 8811 	msr	BASEPRI, r3
 8002476:	f3bf 8f6f 	isb	sy
 800247a:	f3bf 8f4f 	dsb	sy
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	e7fe      	b.n	8002480 <xTaskIncrementTick+0x44>
 8002482:	4b43      	ldr	r3, [pc, #268]	; (8002590 <xTaskIncrementTick+0x154>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	4b42      	ldr	r3, [pc, #264]	; (8002594 <xTaskIncrementTick+0x158>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a40      	ldr	r2, [pc, #256]	; (8002590 <xTaskIncrementTick+0x154>)
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4a40      	ldr	r2, [pc, #256]	; (8002594 <xTaskIncrementTick+0x158>)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	4b40      	ldr	r3, [pc, #256]	; (8002598 <xTaskIncrementTick+0x15c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	4a3e      	ldr	r2, [pc, #248]	; (8002598 <xTaskIncrementTick+0x15c>)
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	f000 f994 	bl	80027cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80024a4:	4b3d      	ldr	r3, [pc, #244]	; (800259c <xTaskIncrementTick+0x160>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d34d      	bcc.n	800254a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024ae:	4b38      	ldr	r3, [pc, #224]	; (8002590 <xTaskIncrementTick+0x154>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <xTaskIncrementTick+0x80>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <xTaskIncrementTick+0x82>
 80024bc:	2300      	movs	r3, #0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d004      	beq.n	80024cc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024c2:	4b36      	ldr	r3, [pc, #216]	; (800259c <xTaskIncrementTick+0x160>)
 80024c4:	f04f 32ff 	mov.w	r2, #4294967295
 80024c8:	601a      	str	r2, [r3, #0]
					break;
 80024ca:	e03e      	b.n	800254a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024cc:	4b30      	ldr	r3, [pc, #192]	; (8002590 <xTaskIncrementTick+0x154>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d203      	bcs.n	80024ec <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80024e4:	4a2d      	ldr	r2, [pc, #180]	; (800259c <xTaskIncrementTick+0x160>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6013      	str	r3, [r2, #0]
						break;
 80024ea:	e02e      	b.n	800254a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	3304      	adds	r3, #4
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fcb7 	bl	8001e64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d004      	beq.n	8002508 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	3318      	adds	r3, #24
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fcae 	bl	8001e64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	2201      	movs	r2, #1
 800250e:	409a      	lsls	r2, r3
 8002510:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <xTaskIncrementTick+0x164>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4313      	orrs	r3, r2
 8002516:	4a22      	ldr	r2, [pc, #136]	; (80025a0 <xTaskIncrementTick+0x164>)
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4a1f      	ldr	r2, [pc, #124]	; (80025a4 <xTaskIncrementTick+0x168>)
 8002528:	441a      	add	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	3304      	adds	r3, #4
 800252e:	4619      	mov	r1, r3
 8002530:	4610      	mov	r0, r2
 8002532:	f7ff fc3c 	bl	8001dae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253a:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <xTaskIncrementTick+0x16c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	429a      	cmp	r2, r3
 8002542:	d3b4      	bcc.n	80024ae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002544:	2301      	movs	r3, #1
 8002546:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002548:	e7b1      	b.n	80024ae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800254a:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <xTaskIncrementTick+0x16c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002550:	4914      	ldr	r1, [pc, #80]	; (80025a4 <xTaskIncrementTick+0x168>)
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d907      	bls.n	8002572 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002562:	2301      	movs	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e004      	b.n	8002572 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002568:	4b10      	ldr	r3, [pc, #64]	; (80025ac <xTaskIncrementTick+0x170>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	4a0f      	ldr	r2, [pc, #60]	; (80025ac <xTaskIncrementTick+0x170>)
 8002570:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002572:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <xTaskIncrementTick+0x174>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800257a:	2301      	movs	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800257e:	697b      	ldr	r3, [r7, #20]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200003a8 	.word	0x200003a8
 800258c:	20000384 	.word	0x20000384
 8002590:	20000338 	.word	0x20000338
 8002594:	2000033c 	.word	0x2000033c
 8002598:	20000398 	.word	0x20000398
 800259c:	200003a0 	.word	0x200003a0
 80025a0:	20000388 	.word	0x20000388
 80025a4:	20000284 	.word	0x20000284
 80025a8:	20000280 	.word	0x20000280
 80025ac:	20000390 	.word	0x20000390
 80025b0:	20000394 	.word	0x20000394

080025b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80025ba:	4b26      	ldr	r3, [pc, #152]	; (8002654 <vTaskSwitchContext+0xa0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80025c2:	4b25      	ldr	r3, [pc, #148]	; (8002658 <vTaskSwitchContext+0xa4>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80025c8:	e03e      	b.n	8002648 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80025ca:	4b23      	ldr	r3, [pc, #140]	; (8002658 <vTaskSwitchContext+0xa4>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80025d0:	4b22      	ldr	r3, [pc, #136]	; (800265c <vTaskSwitchContext+0xa8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80025de:	7afb      	ldrb	r3, [r7, #11]
 80025e0:	f1c3 031f 	rsb	r3, r3, #31
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	491e      	ldr	r1, [pc, #120]	; (8002660 <vTaskSwitchContext+0xac>)
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <vTaskSwitchContext+0x5a>
	__asm volatile
 80025fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fe:	f383 8811 	msr	BASEPRI, r3
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	e7fe      	b.n	800260c <vTaskSwitchContext+0x58>
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4a11      	ldr	r2, [pc, #68]	; (8002660 <vTaskSwitchContext+0xac>)
 800261a:	4413      	add	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	3308      	adds	r3, #8
 8002630:	429a      	cmp	r2, r3
 8002632:	d104      	bne.n	800263e <vTaskSwitchContext+0x8a>
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a07      	ldr	r2, [pc, #28]	; (8002664 <vTaskSwitchContext+0xb0>)
 8002646:	6013      	str	r3, [r2, #0]
}
 8002648:	bf00      	nop
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	200003a8 	.word	0x200003a8
 8002658:	20000394 	.word	0x20000394
 800265c:	20000388 	.word	0x20000388
 8002660:	20000284 	.word	0x20000284
 8002664:	20000280 	.word	0x20000280

08002668 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002670:	f000 f852 	bl	8002718 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <prvIdleTask+0x28>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d9f9      	bls.n	8002670 <prvIdleTask+0x8>
			{
				taskYIELD();
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <prvIdleTask+0x2c>)
 800267e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	f3bf 8f4f 	dsb	sy
 8002688:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800268c:	e7f0      	b.n	8002670 <prvIdleTask+0x8>
 800268e:	bf00      	nop
 8002690:	20000284 	.word	0x20000284
 8002694:	e000ed04 	.word	0xe000ed04

08002698 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	e00c      	b.n	80026be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <prvInitialiseTaskLists+0x60>)
 80026b0:	4413      	add	r3, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fb50 	bl	8001d58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3301      	adds	r3, #1
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b06      	cmp	r3, #6
 80026c2:	d9ef      	bls.n	80026a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80026c4:	480d      	ldr	r0, [pc, #52]	; (80026fc <prvInitialiseTaskLists+0x64>)
 80026c6:	f7ff fb47 	bl	8001d58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80026ca:	480d      	ldr	r0, [pc, #52]	; (8002700 <prvInitialiseTaskLists+0x68>)
 80026cc:	f7ff fb44 	bl	8001d58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80026d0:	480c      	ldr	r0, [pc, #48]	; (8002704 <prvInitialiseTaskLists+0x6c>)
 80026d2:	f7ff fb41 	bl	8001d58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80026d6:	480c      	ldr	r0, [pc, #48]	; (8002708 <prvInitialiseTaskLists+0x70>)
 80026d8:	f7ff fb3e 	bl	8001d58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80026dc:	480b      	ldr	r0, [pc, #44]	; (800270c <prvInitialiseTaskLists+0x74>)
 80026de:	f7ff fb3b 	bl	8001d58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <prvInitialiseTaskLists+0x78>)
 80026e4:	4a05      	ldr	r2, [pc, #20]	; (80026fc <prvInitialiseTaskLists+0x64>)
 80026e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <prvInitialiseTaskLists+0x7c>)
 80026ea:	4a05      	ldr	r2, [pc, #20]	; (8002700 <prvInitialiseTaskLists+0x68>)
 80026ec:	601a      	str	r2, [r3, #0]
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000284 	.word	0x20000284
 80026fc:	20000310 	.word	0x20000310
 8002700:	20000324 	.word	0x20000324
 8002704:	20000340 	.word	0x20000340
 8002708:	20000354 	.word	0x20000354
 800270c:	2000036c 	.word	0x2000036c
 8002710:	20000338 	.word	0x20000338
 8002714:	2000033c 	.word	0x2000033c

08002718 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800271e:	e019      	b.n	8002754 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002720:	f000 f9ca 	bl	8002ab8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <prvCheckTasksWaitingTermination+0x4c>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3304      	adds	r3, #4
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fb97 	bl	8001e64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <prvCheckTasksWaitingTermination+0x50>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3b01      	subs	r3, #1
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <prvCheckTasksWaitingTermination+0x50>)
 800273e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <prvCheckTasksWaitingTermination+0x54>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3b01      	subs	r3, #1
 8002746:	4a09      	ldr	r2, [pc, #36]	; (800276c <prvCheckTasksWaitingTermination+0x54>)
 8002748:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800274a:	f000 f9e3 	bl	8002b14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f80e 	bl	8002770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <prvCheckTasksWaitingTermination+0x54>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e1      	bne.n	8002720 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000354 	.word	0x20000354
 8002768:	20000380 	.word	0x20000380
 800276c:	20000368 	.word	0x20000368

08002770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800277e:	2b00      	cmp	r3, #0
 8002780:	d108      	bne.n	8002794 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fb12 	bl	8002db0 <vPortFree>
				vPortFree( pxTCB );
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fb0f 	bl	8002db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002792:	e017      	b.n	80027c4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800279a:	2b01      	cmp	r3, #1
 800279c:	d103      	bne.n	80027a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fb06 	bl	8002db0 <vPortFree>
	}
 80027a4:	e00e      	b.n	80027c4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d009      	beq.n	80027c4 <prvDeleteTCB+0x54>
 80027b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b4:	f383 8811 	msr	BASEPRI, r3
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	e7fe      	b.n	80027c2 <prvDeleteTCB+0x52>
	}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <prvResetNextTaskUnblockTime+0x40>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <prvResetNextTaskUnblockTime+0x14>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <prvResetNextTaskUnblockTime+0x16>
 80027e0:	2300      	movs	r3, #0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <prvResetNextTaskUnblockTime+0x44>)
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80027ee:	e008      	b.n	8002802 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <prvResetNextTaskUnblockTime+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4a04      	ldr	r2, [pc, #16]	; (8002810 <prvResetNextTaskUnblockTime+0x44>)
 8002800:	6013      	str	r3, [r2, #0]
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	20000338 	.word	0x20000338
 8002810:	200003a0 	.word	0x200003a0

08002814 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800281e:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002824:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3304      	adds	r3, #4
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fb1a 	bl	8001e64 <uxListRemove>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10b      	bne.n	800284e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	2201      	movs	r2, #1
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	4b21      	ldr	r3, [pc, #132]	; (80028cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4013      	ands	r3, r2
 800284a:	4a20      	ldr	r2, [pc, #128]	; (80028cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800284c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d10a      	bne.n	800286c <prvAddCurrentTaskToDelayedList+0x58>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d007      	beq.n	800286c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3304      	adds	r3, #4
 8002862:	4619      	mov	r1, r3
 8002864:	481a      	ldr	r0, [pc, #104]	; (80028d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002866:	f7ff faa2 	bl	8001dae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800286a:	e026      	b.n	80028ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	429a      	cmp	r2, r3
 8002882:	d209      	bcs.n	8002898 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3304      	adds	r3, #4
 800288e:	4619      	mov	r1, r3
 8002890:	4610      	mov	r0, r2
 8002892:	f7ff faaf 	bl	8001df4 <vListInsert>
}
 8002896:	e010      	b.n	80028ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002898:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3304      	adds	r3, #4
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f7ff faa5 	bl	8001df4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d202      	bcs.n	80028ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80028b4:	4a09      	ldr	r2, [pc, #36]	; (80028dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	6013      	str	r3, [r2, #0]
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000384 	.word	0x20000384
 80028c8:	20000280 	.word	0x20000280
 80028cc:	20000388 	.word	0x20000388
 80028d0:	2000036c 	.word	0x2000036c
 80028d4:	2000033c 	.word	0x2000033c
 80028d8:	20000338 	.word	0x20000338
 80028dc:	200003a0 	.word	0x200003a0

080028e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3b04      	subs	r3, #4
 80028f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	3b04      	subs	r3, #4
 80028fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f023 0201 	bic.w	r2, r3, #1
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3b04      	subs	r3, #4
 800290e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002910:	4a08      	ldr	r2, [pc, #32]	; (8002934 <pxPortInitialiseStack+0x54>)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3b14      	subs	r3, #20
 800291a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3b20      	subs	r3, #32
 8002926:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002928:	68fb      	ldr	r3, [r7, #12]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	08002939 	.word	0x08002939

08002938 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800293e:	2300      	movs	r3, #0
 8002940:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <prvTaskExitError+0x4c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294a:	d009      	beq.n	8002960 <prvTaskExitError+0x28>
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	e7fe      	b.n	800295e <prvTaskExitError+0x26>
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002972:	bf00      	nop
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0fc      	beq.n	8002974 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	2000000c 	.word	0x2000000c
	...

08002990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <pxCurrentTCBConst2>)
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	6808      	ldr	r0, [r1, #0]
 8002996:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800299a:	f380 8809 	msr	PSP, r0
 800299e:	f3bf 8f6f 	isb	sy
 80029a2:	f04f 0000 	mov.w	r0, #0
 80029a6:	f380 8811 	msr	BASEPRI, r0
 80029aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80029ae:	4770      	bx	lr

080029b0 <pxCurrentTCBConst2>:
 80029b0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80029b4:	bf00      	nop
 80029b6:	bf00      	nop

080029b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80029b8:	4806      	ldr	r0, [pc, #24]	; (80029d4 <prvPortStartFirstTask+0x1c>)
 80029ba:	6800      	ldr	r0, [r0, #0]
 80029bc:	6800      	ldr	r0, [r0, #0]
 80029be:	f380 8808 	msr	MSP, r0
 80029c2:	b662      	cpsie	i
 80029c4:	b661      	cpsie	f
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	df00      	svc	0
 80029d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80029d2:	bf00      	nop
 80029d4:	e000ed08 	.word	0xe000ed08

080029d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80029de:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <xPortStartScheduler+0xcc>)
 80029e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	22ff      	movs	r2, #255	; 0xff
 80029ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4b29      	ldr	r3, [pc, #164]	; (8002aa8 <xPortStartScheduler+0xd0>)
 8002a04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a06:	4b29      	ldr	r3, [pc, #164]	; (8002aac <xPortStartScheduler+0xd4>)
 8002a08:	2207      	movs	r2, #7
 8002a0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a0c:	e009      	b.n	8002a22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002a0e:	4b27      	ldr	r3, [pc, #156]	; (8002aac <xPortStartScheduler+0xd4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	4a25      	ldr	r2, [pc, #148]	; (8002aac <xPortStartScheduler+0xd4>)
 8002a16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2a:	2b80      	cmp	r3, #128	; 0x80
 8002a2c:	d0ef      	beq.n	8002a0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a2e:	4b1f      	ldr	r3, [pc, #124]	; (8002aac <xPortStartScheduler+0xd4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f1c3 0307 	rsb	r3, r3, #7
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d009      	beq.n	8002a4e <xPortStartScheduler+0x76>
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	e7fe      	b.n	8002a4c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <xPortStartScheduler+0xd4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	4a15      	ldr	r2, [pc, #84]	; (8002aac <xPortStartScheduler+0xd4>)
 8002a56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <xPortStartScheduler+0xd4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a60:	4a12      	ldr	r2, [pc, #72]	; (8002aac <xPortStartScheduler+0xd4>)
 8002a62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <xPortStartScheduler+0xd8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0f      	ldr	r2, [pc, #60]	; (8002ab0 <xPortStartScheduler+0xd8>)
 8002a72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <xPortStartScheduler+0xd8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <xPortStartScheduler+0xd8>)
 8002a7e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002a82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002a84:	f000 f8b0 	bl	8002be8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <xPortStartScheduler+0xdc>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002a8e:	f7ff ff93 	bl	80029b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002a92:	f7ff fd8f 	bl	80025b4 <vTaskSwitchContext>
	prvTaskExitError();
 8002a96:	f7ff ff4f 	bl	8002938 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	e000e400 	.word	0xe000e400
 8002aa8:	200003ac 	.word	0x200003ac
 8002aac:	200003b0 	.word	0x200003b0
 8002ab0:	e000ed20 	.word	0xe000ed20
 8002ab4:	2000000c 	.word	0x2000000c

08002ab8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac2:	f383 8811 	msr	BASEPRI, r3
 8002ac6:	f3bf 8f6f 	isb	sy
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002ad0:	4b0e      	ldr	r3, [pc, #56]	; (8002b0c <vPortEnterCritical+0x54>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a0d      	ldr	r2, [pc, #52]	; (8002b0c <vPortEnterCritical+0x54>)
 8002ad8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <vPortEnterCritical+0x54>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d10e      	bne.n	8002b00 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <vPortEnterCritical+0x58>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <vPortEnterCritical+0x48>
 8002aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	603b      	str	r3, [r7, #0]
 8002afe:	e7fe      	b.n	8002afe <vPortEnterCritical+0x46>
	}
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	2000000c 	.word	0x2000000c
 8002b10:	e000ed04 	.word	0xe000ed04

08002b14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <vPortExitCritical+0x48>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <vPortExitCritical+0x22>
 8002b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b26:	f383 8811 	msr	BASEPRI, r3
 8002b2a:	f3bf 8f6f 	isb	sy
 8002b2e:	f3bf 8f4f 	dsb	sy
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	e7fe      	b.n	8002b34 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <vPortExitCritical+0x48>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <vPortExitCritical+0x48>)
 8002b3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <vPortExitCritical+0x48>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d104      	bne.n	8002b52 <vPortExitCritical+0x3e>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	2000000c 	.word	0x2000000c

08002b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002b60:	f3ef 8009 	mrs	r0, PSP
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <pxCurrentTCBConst>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002b70:	6010      	str	r0, [r2, #0]
 8002b72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002b76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002b7a:	f380 8811 	msr	BASEPRI, r0
 8002b7e:	f7ff fd19 	bl	80025b4 <vTaskSwitchContext>
 8002b82:	f04f 0000 	mov.w	r0, #0
 8002b86:	f380 8811 	msr	BASEPRI, r0
 8002b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	6808      	ldr	r0, [r1, #0]
 8002b92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002b96:	f380 8809 	msr	PSP, r0
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	4770      	bx	lr

08002ba0 <pxCurrentTCBConst>:
 8002ba0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop

08002ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
	__asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002bc0:	f7ff fc3c 	bl	800243c <xTaskIncrementTick>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <SysTick_Handler+0x3c>)
 8002bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	e000ed04 	.word	0xe000ed04

08002be8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002bec:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <vPortSetupTimerInterrupt+0x30>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <vPortSetupTimerInterrupt+0x34>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002bf8:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <vPortSetupTimerInterrupt+0x38>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a09      	ldr	r2, [pc, #36]	; (8002c24 <vPortSetupTimerInterrupt+0x3c>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	4a08      	ldr	r2, [pc, #32]	; (8002c28 <vPortSetupTimerInterrupt+0x40>)
 8002c06:	3b01      	subs	r3, #1
 8002c08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c0a:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <vPortSetupTimerInterrupt+0x30>)
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	e000e010 	.word	0xe000e010
 8002c1c:	e000e018 	.word	0xe000e018
 8002c20:	20000000 	.word	0x20000000
 8002c24:	10624dd3 	.word	0x10624dd3
 8002c28:	e000e014 	.word	0xe000e014

08002c2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002c38:	f7ff fb56 	bl	80022e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002c3c:	4b57      	ldr	r3, [pc, #348]	; (8002d9c <pvPortMalloc+0x170>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002c44:	f000 f90c 	bl	8002e60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002c48:	4b55      	ldr	r3, [pc, #340]	; (8002da0 <pvPortMalloc+0x174>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f040 808c 	bne.w	8002d6e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01c      	beq.n	8002c96 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d013      	beq.n	8002c96 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f023 0307 	bic.w	r3, r3, #7
 8002c74:	3308      	adds	r3, #8
 8002c76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <pvPortMalloc+0x6a>
	__asm volatile
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	e7fe      	b.n	8002c94 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d068      	beq.n	8002d6e <pvPortMalloc+0x142>
 8002c9c:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <pvPortMalloc+0x178>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d863      	bhi.n	8002d6e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002ca6:	4b40      	ldr	r3, [pc, #256]	; (8002da8 <pvPortMalloc+0x17c>)
 8002ca8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002caa:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <pvPortMalloc+0x17c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cb0:	e004      	b.n	8002cbc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d903      	bls.n	8002cce <pvPortMalloc+0xa2>
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f1      	bne.n	8002cb2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002cce:	4b33      	ldr	r3, [pc, #204]	; (8002d9c <pvPortMalloc+0x170>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d04a      	beq.n	8002d6e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2208      	movs	r2, #8
 8002cde:	4413      	add	r3, r2
 8002ce0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	1ad2      	subs	r2, r2, r3
 8002cf2:	2308      	movs	r3, #8
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d91e      	bls.n	8002d38 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4413      	add	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d009      	beq.n	8002d20 <pvPortMalloc+0xf4>
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	e7fe      	b.n	8002d1e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	1ad2      	subs	r2, r2, r3
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d32:	69b8      	ldr	r0, [r7, #24]
 8002d34:	f000 f8f6 	bl	8002f24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <pvPortMalloc+0x178>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	4a18      	ldr	r2, [pc, #96]	; (8002da4 <pvPortMalloc+0x178>)
 8002d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d46:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <pvPortMalloc+0x178>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b18      	ldr	r3, [pc, #96]	; (8002dac <pvPortMalloc+0x180>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d203      	bcs.n	8002d5a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d52:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <pvPortMalloc+0x178>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a15      	ldr	r2, [pc, #84]	; (8002dac <pvPortMalloc+0x180>)
 8002d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <pvPortMalloc+0x174>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002d6e:	f7ff fac9 	bl	8002304 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d009      	beq.n	8002d90 <pvPortMalloc+0x164>
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	e7fe      	b.n	8002d8e <pvPortMalloc+0x162>
	return pvReturn;
 8002d90:	69fb      	ldr	r3, [r7, #28]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3728      	adds	r7, #40	; 0x28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000fbc 	.word	0x20000fbc
 8002da0:	20000fc8 	.word	0x20000fc8
 8002da4:	20000fc0 	.word	0x20000fc0
 8002da8:	20000fb4 	.word	0x20000fb4
 8002dac:	20000fc4 	.word	0x20000fc4

08002db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d046      	beq.n	8002e50 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	425b      	negs	r3, r3
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4413      	add	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <vPortFree+0xa8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <vPortFree+0x42>
 8002dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	e7fe      	b.n	8002df0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d009      	beq.n	8002e0e <vPortFree+0x5e>
 8002dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfe:	f383 8811 	msr	BASEPRI, r3
 8002e02:	f3bf 8f6f 	isb	sy
 8002e06:	f3bf 8f4f 	dsb	sy
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	e7fe      	b.n	8002e0c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <vPortFree+0xa8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d019      	beq.n	8002e50 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d115      	bne.n	8002e50 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <vPortFree+0xa8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	401a      	ands	r2, r3
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002e34:	f7ff fa58 	bl	80022e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <vPortFree+0xac>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4413      	add	r3, r2
 8002e42:	4a06      	ldr	r2, [pc, #24]	; (8002e5c <vPortFree+0xac>)
 8002e44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e46:	6938      	ldr	r0, [r7, #16]
 8002e48:	f000 f86c 	bl	8002f24 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002e4c:	f7ff fa5a 	bl	8002304 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002e50:	bf00      	nop
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000fc8 	.word	0x20000fc8
 8002e5c:	20000fc0 	.word	0x20000fc0

08002e60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002e66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002e6c:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <prvHeapInit+0xac>)
 8002e6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00c      	beq.n	8002e94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3307      	adds	r3, #7
 8002e7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0307 	bic.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <prvHeapInit+0xac>)
 8002e90:	4413      	add	r3, r2
 8002e92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002e98:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <prvHeapInit+0xb0>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <prvHeapInit+0xb0>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002eac:	2208      	movs	r2, #8
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0307 	bic.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a15      	ldr	r2, [pc, #84]	; (8002f14 <prvHeapInit+0xb4>)
 8002ec0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <prvHeapInit+0xb4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <prvHeapInit+0xb4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	1ad2      	subs	r2, r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <prvHeapInit+0xb4>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a0a      	ldr	r2, [pc, #40]	; (8002f18 <prvHeapInit+0xb8>)
 8002eee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <prvHeapInit+0xbc>)
 8002ef6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <prvHeapInit+0xc0>)
 8002efa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002efe:	601a      	str	r2, [r3, #0]
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	200003b4 	.word	0x200003b4
 8002f10:	20000fb4 	.word	0x20000fb4
 8002f14:	20000fbc 	.word	0x20000fbc
 8002f18:	20000fc4 	.word	0x20000fc4
 8002f1c:	20000fc0 	.word	0x20000fc0
 8002f20:	20000fc8 	.word	0x20000fc8

08002f24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <prvInsertBlockIntoFreeList+0xa8>)
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e002      	b.n	8002f38 <prvInsertBlockIntoFreeList+0x14>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d8f7      	bhi.n	8002f32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d108      	bne.n	8002f66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	441a      	add	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	441a      	add	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d118      	bne.n	8002fac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <prvInsertBlockIntoFreeList+0xac>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d00d      	beq.n	8002fa2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	441a      	add	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e008      	b.n	8002fb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <prvInsertBlockIntoFreeList+0xac>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e003      	b.n	8002fb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d002      	beq.n	8002fc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	20000fb4 	.word	0x20000fb4
 8002fd0:	20000fbc 	.word	0x20000fbc

08002fd4 <__libc_init_array>:
 8002fd4:	b570      	push	{r4, r5, r6, lr}
 8002fd6:	2500      	movs	r5, #0
 8002fd8:	4e0c      	ldr	r6, [pc, #48]	; (800300c <__libc_init_array+0x38>)
 8002fda:	4c0d      	ldr	r4, [pc, #52]	; (8003010 <__libc_init_array+0x3c>)
 8002fdc:	1ba4      	subs	r4, r4, r6
 8002fde:	10a4      	asrs	r4, r4, #2
 8002fe0:	42a5      	cmp	r5, r4
 8002fe2:	d109      	bne.n	8002ff8 <__libc_init_array+0x24>
 8002fe4:	f000 f822 	bl	800302c <_init>
 8002fe8:	2500      	movs	r5, #0
 8002fea:	4e0a      	ldr	r6, [pc, #40]	; (8003014 <__libc_init_array+0x40>)
 8002fec:	4c0a      	ldr	r4, [pc, #40]	; (8003018 <__libc_init_array+0x44>)
 8002fee:	1ba4      	subs	r4, r4, r6
 8002ff0:	10a4      	asrs	r4, r4, #2
 8002ff2:	42a5      	cmp	r5, r4
 8002ff4:	d105      	bne.n	8003002 <__libc_init_array+0x2e>
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}
 8002ff8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ffc:	4798      	blx	r3
 8002ffe:	3501      	adds	r5, #1
 8003000:	e7ee      	b.n	8002fe0 <__libc_init_array+0xc>
 8003002:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003006:	4798      	blx	r3
 8003008:	3501      	adds	r5, #1
 800300a:	e7f2      	b.n	8002ff2 <__libc_init_array+0x1e>
 800300c:	080030fc 	.word	0x080030fc
 8003010:	080030fc 	.word	0x080030fc
 8003014:	080030fc 	.word	0x080030fc
 8003018:	08003100 	.word	0x08003100

0800301c <memset>:
 800301c:	4603      	mov	r3, r0
 800301e:	4402      	add	r2, r0
 8003020:	4293      	cmp	r3, r2
 8003022:	d100      	bne.n	8003026 <memset+0xa>
 8003024:	4770      	bx	lr
 8003026:	f803 1b01 	strb.w	r1, [r3], #1
 800302a:	e7f9      	b.n	8003020 <memset+0x4>

0800302c <_init>:
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302e:	bf00      	nop
 8003030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003032:	bc08      	pop	{r3}
 8003034:	469e      	mov	lr, r3
 8003036:	4770      	bx	lr

08003038 <_fini>:
 8003038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303a:	bf00      	nop
 800303c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303e:	bc08      	pop	{r3}
 8003040:	469e      	mov	lr, r3
 8003042:	4770      	bx	lr
